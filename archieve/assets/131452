저는 조금 다른 부분에서 답변해드리고 싶네요.
쉽게 답변하자면, 입력 최적화는 꼭 모든 코드에 넣어보시는게 좋습니다.

하지만, 왜 PyPy3은 Python보다 빠를까요?

정확히 말씀드리자면, 왜 더 빠를 때가 있을까요? 겠네요.
그 정답은 인터프리터(혹은 컴파일러)에서 최적화를 시도하는가의 차이에 있습니다.

Python3은, 기본적으로 최적화를 시도하지 않습니다. 그렇다면, 최적화는 무엇일까요? 

기술적 부분을 제하고, 간략하게 설명드리자면 코드를 있는 그대로 실행한다. 라고 말할 수 있습니다.
코드를 그대로 바이트 코드로 변환한뒤, 기본적으로 아무런 최적화를 거치지 않고 그대로 실행합니다. 

만약, 동일한 결과를 가지는 코드를 비효율적으로 짠다면 어떻게 될까요?
말 그대로, 똑같은 결과를 낳는데, 더 비효율적으로 수행되게 됩니다. 

그래서 입력 최적화 코드를 입력해야 하는거죠.
저는, 습관적으로 입력하시는게 가장 좋다고 생각합니다.

반면, PyPy3는 JIT 인터프리터가 최적화를 수행합니다.
크게 두 가지가 있습니다 - 바이트코드를 동일한 기능을 하는 더 빠른 코드로 변환시키는 방법, 실행중에 속도를 개선시키는 방법.

전자는, 함부러 시도할 수 없습니다.
만약 그 최적화가 코드에서 의미한 바와 달라지면, 즉, 로우 레벨에서의 동작이 추상적인 레벨에 영향을 주면 안되겠죠.
그래서 굉장히 소극적으로 수행되며, 그럴 수 밖에 없습니다.

인터프리터가 코더가 의도한바와 다르게 동작한다?
월권도 그게 무슨 월권이겠습니까? 버그나면 인터프리터를 탓해야 하나요?
이런 맥락으로도 입력 최적화를 매 코드마다 명시해야 하는 이유를 이해하실 수 있습니다.

본문에서 입력 최적화를 안하셨지만, 하신다면 더욱 빨라집니다.
PyPy3 에서도 마찬가지입니다.
Python3 에서 입력 최적화를 안하면, 입력의 크기가 커서 시간초과가 납니다.
PyPy3 는 빨라서 입력 최적화를 안해도 시간초과가 나지 않습니다. 하지만, 입력 최적화를 넣으면 더 빨라집니다.

그래서, PyPy3는 왜 더 빠른가요?
그리고 왜, 정확히 말하면 더 빠를 때가 있다고 표현하나요?

정답은 JIT의 런타임 최적화에 있습니다.
기본적으로 JIT은 C 기반으로 구현된 표준 구현체, Python 3 보다 느립니다.
입력 크기가 작거나, 수행할 바이트 코드가 적다면 보통 Python 3가 더 빠른 이유도 이것에 있습니다.

그렇다면, 더 빠른 이유는 순수히 최적화에 있다고 봐야겠네요.
런타임 최적화는 코드를 실행하는 중에 바이트 코드 패턴을 분석합니다.
런타임. 즉, 코드 실행 중에 시도합니다.

그리고, 그 다음에 그것을 경험적인 방법으로 최적화를 시도합니다.
경험적. 통계를 기반으로 하는, 일종의 휴리스틱 분야이기도 하고,
자주 쓰이는 패턴(common usage pattern)에 대한 패턴 최적화이기도 합니다.
이게 유의미한 시간 변화를 보이기 위해선, 패턴을 분석하는 시간, 즉 warn-up 시간이 필요합니다.

정리해볼까요?

PyPy 3에서 입력 크기가 크면, 실행할 바이트 코드가 늘어납니다. 
JIT은 런타임 중에 이러한 바이트 코드를 경험적으로 분석해서 최적화 합니다.

실행할 바이트 코드가 많은 경우? -> 입력 크기가 큰 문제.

PyPy3는 입력 크기가 큰 문제에서 Python3 보다 빠르게 동작할 수 있습니다.

본문의 내용은 https://www.pypy.org/performan... 과 https://doc.pypy.org/en/latest... 를 참고하여 개인 연구의 일환입니다.
https://github.com/kimdw9983/a... 에서 더 많은 내용을 참고하실 수 있습니다.